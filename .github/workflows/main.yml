# This is a basic workflow to help you get started with Actions

name: Build

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  buildLinux:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - uses: krdlab/setup-haxe@master
        with:
          haxe-version: 4.2.0
      # Runs a set of commands using the runners shell
      - name: Install Haxelib
        run: |
          haxelib setup ~/haxelib
          haxelib install hxcpp > /dev/null
          haxelib install lime
          haxelib install openfl
          haxelib --never install flixel
          haxelib run lime setup flixel
          haxelib run lime setup
          haxelib install flixel-tools
          haxelib install flixel-ui
          haxelib install flixel-addons
          haxelib install tjson
          haxelib install hxjsonast
          haxelib git linc_luajit https://github.com/AndreiRudenko/linc_luajit
          haxelib install hscript
          haxelib git hscript-ex https://github.com/ianharrigan/hscript-ex
          haxelib git discord_rpc https://github.com/Aidan63/linc_discord-rpc
          haxelib install hxcpp-debug-server
          haxelib list
      - name: Create Version Tag
        run: echo "${{github.run_id}}" > VERSION
      - name: Compile
        run: haxelib run lime build Project.xml linux --app-version="4.0.0-${{ github.run_id}}"
      - name: Publish Artifact
        uses: actions/upload-artifact@v2.2.4
        with:
          name: linuxBuild
          path: 'export/release/linux/bin' 
      - name: Auto Release
        # You may pin to the exact commit or the version.
        # uses: CupOfTea696/gh-action-auto-release@a8f57f49a805d334ac7abe31b689e7ea24e1ee40
        uses: CupOfTea696/gh-action-auto-release@v1.0.2
        with:
          # Title for the release
          title: $semver # optional, default is Version $semver
          # Name for the git tag
          tag: $version # optional, default is $version
          # Whether or not this release should be published as a draft
          draft: false # optional, default is false
          # The path to the CHANGELOG
          changelog: CHANGELOG.md # optional, default is CHANGELOG.md
          # String a CHANGELOG entry must contain to be used as the entry for this release
          changelog-entry: $version # optional, default is $version
          # Pattern the commit message must match to create a release
          regex: "" # optional
          # Pattern the commit message must match to mark the release as a prerelease
          prerelease-regex: "" # optional
  buildWindows:
    runs-on: windows-latest
    
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2.3.0

      - uses: krdlab/setup-haxe@master
        with:
          haxe-version: 4.2.0
      # Runs a set of commands using the runners shell
      - name: Install Haxelib
        run: |
          haxelib setup C:/haxelib
          haxelib install hxcpp > nul
          haxelib install lime
          haxelib install openfl
          haxelib --never install flixel
          haxelib run lime setup flixel
          haxelib run lime setup
          haxelib install flixel-tools
          haxelib install flixel-ui
          haxelib install flixel-addons
          haxelib install tjson
          haxelib install hxjsonast
          haxelib git linc_luajit https://github.com/AndreiRudenko/linc_luajit
          haxelib install hscript 
          haxelib git hscript-ex https://github.com/ianharrigan/hscript-ex
          haxelib git discord_rpc https://github.com/Aidan63/linc_discord-rpc
          haxelib install hxcpp-debug-server
          haxelib list
        shell: cmd
      - name: Create Version Tag
        run: echo "${{github.run_id}}" > VERSION
      - name: Compile
        run: haxelib run lime build windows --app-version="4.0.0-${{ github.run_id}}"
      - name: Publish Artifact
        uses: actions/upload-artifact@v2.2.4
        with:
          name: windowsBuild
          path: export/release/windows/bin
      - name: Auto Release
        # You may pin to the exact commit or the version.
        # uses: CupOfTea696/gh-action-auto-release@a8f57f49a805d334ac7abe31b689e7ea24e1ee40
        uses: CupOfTea696/gh-action-auto-release@v1.0.2
        with:
          # Title for the release
          title: $semver # optional, default is Version $semver
          # Name for the git tag
          tag: $version # optional, default is $version
          # Whether or not this release should be published as a draft
          draft: false # optional, default is false
          # The path to the CHANGELOG
          changelog: CHANGELOG.md # optional, default is CHANGELOG.md
          # String a CHANGELOG entry must contain to be used as the entry for this release
          changelog-entry: $version # optional, default is $version
          # Pattern the commit message must match to create a release
          regex: "" # optional
          # Pattern the commit message must match to mark the release as a prerelease
          prerelease-regex: "" # optional
  buildMac:
    runs-on: macos-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - uses: krdlab/setup-haxe@master
        with:
          haxe-version: 4.2.0
      # Runs a set of commands using the runners shell
      - name: Install Haxelib
        run: |
          haxelib setup ~/haxelib
          haxelib install hxcpp > /dev/null
          haxelib install lime
          haxelib install openfl
          haxelib --never install flixel
          haxelib run lime setup flixel
          haxelib run lime setup
          haxelib install flixel-tools
          haxelib install flixel-ui
          haxelib install flixel-addons
          haxelib install tjson
          haxelib install hxjsonast
          haxelib git linc_luajit https://github.com/AndreiRudenko/linc_luajit
          haxelib install hscript
          haxelib git hscript-ex https://github.com/ianharrigan/hscript-ex
          haxelib git discord_rpc https://github.com/Aidan63/linc_discord-rpc
          haxelib install hxcpp-debug-server
          haxelib list
      - name: Create Version Tag
        run: echo "${{github.run_id}}" > VERSION
      - name: Compile
        run: haxelib run lime build mac --app-version="4.0.0-${{ github.run_id}}"
      - name: Publish Artifact
        uses: actions/upload-artifact@v2.2.4
        with:
          name: macBuild
          path: export/release/macos/bin
      - name: Auto Release
        # You may pin to the exact commit or the version.
        # uses: CupOfTea696/gh-action-auto-release@a8f57f49a805d334ac7abe31b689e7ea24e1ee40
        uses: CupOfTea696/gh-action-auto-release@v1.0.2
        with:
          # Title for the release
          title: $semver # optional, default is Version $semver
          # Name for the git tag
          tag: $version # optional, default is $version
          # Whether or not this release should be published as a draft
          draft: false # optional, default is false
          # The path to the CHANGELOG
          changelog: CHANGELOG.md # optional, default is CHANGELOG.md
          # String a CHANGELOG entry must contain to be used as the entry for this release
          changelog-entry: $version # optional, default is $version
          # Pattern the commit message must match to create a release
          regex: "" # optional
          # Pattern the commit message must match to mark the release as a prerelease
          prerelease-regex: "" # optional

